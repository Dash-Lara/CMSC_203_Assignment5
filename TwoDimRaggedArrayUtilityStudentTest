import static org.junit.Assert.*;

import java.io.File;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
/*
 * Class: CMSC203 21076
 * Instructor: Khandan Monshi
 * Description: A class to test the TwoDimRaggedArrayUtility class
 * Due: 11/29/2022
 * Platform/compiler: Eclipse
 * I, Dashawna Lara, pledge that I, Dashawna Lara, have completed the programming 
 * assignment independently. I, Dashawna Lara, have not copied the code 
 * from a student or any source. I have not given my code 
 * to any student.
   Print your Name here: Dashawna Lara
*/
/**
 * This class represents test cases written by the student for
 * a twoDimRaggedArrayUtility object
 * @author Dasha
 *
 */
public class TwoDimRaggedArrayUtilityStudentTest {
	private double[][] dataSet1 = 
			{{1, 2, 3},
			{4, 5},
			{6, 7, 8, 9}};
	
	private double[][] dataSet2 = 
			{{7, 2, 9, 4},
			{5},
			{8, 1, 3}, 
			{11, 6, 7, 2}};
	
	private double[][] dataSet3 = 
			{{7.2, 2.5, 9.3, 4.8},
			{5.9},
			{8.1, 1.7, 3.3}, 
			{11.6, 6.9, 7.3, 2.7}};
	
	private double[][] dataSet4 = 
			{{-2.5, -5.3, 6.1},
			{-4.4, 8.2},
			{2.3, -7.5}, 
			{-4.2, 7.3, -5.9, 2.6}};
	
	private double[][] district3 = 
			{{1.65, 4.50, 2.36, 7.45, 3.44, 6.23},
			{2.22, -3.24, -1.66, -5.48, 3.46},
			{4.23, 2.29, 5.29}, 
			{2.76, 3.76, 4.29, 5.48, 3.43},
			{3.38, 3.65, 3.76},
			{2.46, 3.34, 2.38, 8.26, 5.34}};
	
	private double[][] district5 = 
			{{12536.54, 45665.05, 21543.66, 75324.57, 33884.48, 65982.39},
			{28762.21, 35762.42, 19546.63},{48962.34, 28552.95, 23863.66, 54992.97},
			{22567.63, 36237.64, 42862.95, 54384.86, 37944.37},
			{31843.86, 36546.57, 34557.68, 63872.39, 42657.70, 45924.51},
			{26574.65, 32653.46, 22563.87, 89352.68, 52873.49}};
	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}
	@Test
	public void testReadFile() {
		double[][] array;
		try {
			array = TwoDimRaggedArrayUtility.readFile(new File("d_lara_ex1.txt"));
		}
		catch(Exception x) {
			array = new double[10][10];
		}
		assertEquals(0, array[0][0], .001);//Catches exception and is 0
	}
	@Test
	public void testGetTotal() {
		assertEquals(-3.3, TwoDimRaggedArrayUtility.getTotal(dataSet4), .001);
	}
	@Test
	public void testGetAverage() {
		assertEquals(5.0, TwoDimRaggedArrayUtility.getAverage(dataSet1),.001);
		assertEquals(5.42, TwoDimRaggedArrayUtility.getAverage(dataSet2),.001);
		assertEquals(5.94, TwoDimRaggedArrayUtility.getAverage(dataSet3),.001);
		assertEquals(-0.3, TwoDimRaggedArrayUtility.getAverage(dataSet4),.001);
		assertEquals(3.15, TwoDimRaggedArrayUtility.getAverage(district3),.001);	
		assertEquals(40303.39, TwoDimRaggedArrayUtility.getAverage(district5),.001);	
	
	}
	@Test
	public void testGetRowTotal() {
		assertEquals(6.0, TwoDimRaggedArrayUtility.getRowTotal(dataSet1, 0), .001);
		assertEquals(9.0, TwoDimRaggedArrayUtility.getRowTotal(dataSet1, 1), .001);
		assertEquals(30.0, TwoDimRaggedArrayUtility.getRowTotal(dataSet1, 2), .001);
		assertEquals(5.0, TwoDimRaggedArrayUtility.getRowTotal(dataSet2, 1), .001);
		assertEquals(23.8, TwoDimRaggedArrayUtility.getRowTotal(dataSet3, 0), .001);
		assertEquals(3.8, TwoDimRaggedArrayUtility.getRowTotal(dataSet4, 1), .001);
		assertEquals(-5.2, TwoDimRaggedArrayUtility.getRowTotal(dataSet4, 2), .001);
		assertEquals(5.9, TwoDimRaggedArrayUtility.getRowTotal(dataSet3, 1), .001);
		assertEquals(-0.2, TwoDimRaggedArrayUtility.getRowTotal(dataSet4, 3), .001);

	}
	@Test
	public void testGetColumnTotal() {
		assertEquals(11.0, TwoDimRaggedArrayUtility.getColumnTotal(dataSet1, 2), .001);
		assertEquals(9.0, TwoDimRaggedArrayUtility.getColumnTotal(dataSet1, 3), .001);
		assertEquals(-8.8, TwoDimRaggedArrayUtility.getColumnTotal(dataSet4, 0), .001);
		assertEquals(0.2, TwoDimRaggedArrayUtility.getColumnTotal(dataSet4, 2), .001);
		assertEquals(6.23, TwoDimRaggedArrayUtility.getColumnTotal(district3, 5), .001);

	}
	@Test
	public void testGetHighestInRow() {
		assertEquals(3, TwoDimRaggedArrayUtility.getHighestInRow(dataSet1, 0), .001);
		assertEquals(5, TwoDimRaggedArrayUtility.getHighestInRow(dataSet1, 1), .001);
		assertEquals(9, TwoDimRaggedArrayUtility.getHighestInRow(dataSet1, 2), .001);
		assertEquals(9, TwoDimRaggedArrayUtility.getHighestInRow(dataSet2, 0), .001);
		assertEquals(5, TwoDimRaggedArrayUtility.getHighestInRow(dataSet2, 1), .001);
		assertEquals(8, TwoDimRaggedArrayUtility.getHighestInRow(dataSet2, 2), .001);
		assertEquals(11, TwoDimRaggedArrayUtility.getHighestInRow(dataSet2, 3), .001);
		assertEquals(9.3, TwoDimRaggedArrayUtility.getHighestInRow(dataSet3, 0), .001);
		assertEquals(5.9, TwoDimRaggedArrayUtility.getHighestInRow(dataSet3, 1), .001);
		assertEquals(8.1, TwoDimRaggedArrayUtility.getHighestInRow(dataSet3, 2), .001);
		assertEquals(11.6, TwoDimRaggedArrayUtility.getHighestInRow(dataSet3, 3), .001);
		assertEquals(6.1, TwoDimRaggedArrayUtility.getHighestInRow(dataSet4, 0), .001);
		assertEquals(8.2, TwoDimRaggedArrayUtility.getHighestInRow(dataSet4, 1), .001);
		assertEquals(2.3, TwoDimRaggedArrayUtility.getHighestInRow(dataSet4, 2), .001);
		assertEquals(7.3, TwoDimRaggedArrayUtility.getHighestInRow(dataSet4, 3), .001);
		assertEquals(75324.57, TwoDimRaggedArrayUtility.getHighestInRow(district5, 0), .001);
		assertEquals(35762.42, TwoDimRaggedArrayUtility.getHighestInRow(district5, 1), .001);
		assertEquals(54992.97, TwoDimRaggedArrayUtility.getHighestInRow(district5, 2), .001);
		assertEquals(54384.86, TwoDimRaggedArrayUtility.getHighestInRow(district5, 3), .001);

	}
	@Test
	public void testGetHighestInRowIndex() {
		assertEquals(2, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet1, 0), .001);
		assertEquals(1, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet1, 1), .001);
		assertEquals(3, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet1, 2), .001);
		assertEquals(2, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet2, 0), .001);
		assertEquals(0, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet2, 1), .001);
		assertEquals(0, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet2, 2), .001);
		assertEquals(0, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet2, 3), .001);
		assertEquals(2, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet3, 0), .001);
		assertEquals(0, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet3, 1), .001);
		assertEquals(0, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet3, 2), .001);
		assertEquals(0, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet3, 3), .001);
		assertEquals(2, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet4, 0), .001);
		assertEquals(1, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet4, 1), .001);
		assertEquals(0, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet4, 2), .001);
		assertEquals(1, TwoDimRaggedArrayUtility.getHighestInRowIndex(dataSet4, 3), .001);
		assertEquals(3, TwoDimRaggedArrayUtility.getHighestInRowIndex(district5, 0), .001);
		assertEquals(1, TwoDimRaggedArrayUtility.getHighestInRowIndex(district5, 1), .001);
		assertEquals(3, TwoDimRaggedArrayUtility.getHighestInRowIndex(district5, 2), .001);
		assertEquals(3, TwoDimRaggedArrayUtility.getHighestInRowIndex(district5, 3), .001);
	}
	@Test
	public void testGetHighestInColumn() {
		assertEquals(6, TwoDimRaggedArrayUtility.getHighestInColumn(dataSet1, 0),.001);
		assertEquals(9, TwoDimRaggedArrayUtility.getHighestInColumn(dataSet1, 3),.001);
		assertEquals(6, TwoDimRaggedArrayUtility.getHighestInColumn(dataSet2, 1),.001);
		assertEquals(9, TwoDimRaggedArrayUtility.getHighestInColumn(dataSet2, 2),.001);
		assertEquals(6.9, TwoDimRaggedArrayUtility.getHighestInColumn(dataSet3, 1),.001);
		assertEquals(4.8, TwoDimRaggedArrayUtility.getHighestInColumn(dataSet3, 3),.001);
	}
	@Test
	public void testGetHighestInColumnIndex() {
		assertEquals(0, TwoDimRaggedArrayUtility.getHighestInColumnIndex(dataSet1, 0),.001);
		assertEquals(3, TwoDimRaggedArrayUtility.getHighestInColumnIndex(dataSet1, 3),.001);
		assertEquals(1, TwoDimRaggedArrayUtility.getHighestInColumnIndex(dataSet2, 1),.001);
		assertEquals(2, TwoDimRaggedArrayUtility.getHighestInColumnIndex(dataSet2, 2),.001);
		assertEquals(1, TwoDimRaggedArrayUtility.getHighestInColumnIndex(dataSet3, 1),.001);
		assertEquals(3, TwoDimRaggedArrayUtility.getHighestInColumnIndex(dataSet3, 3),.001);
	}
	@Test
	public void testGetLowestInColumn() {
		assertEquals(1, TwoDimRaggedArrayUtility.getLowestInColumn(dataSet1, 0),.001);
		assertEquals(9, TwoDimRaggedArrayUtility.getLowestInColumn(dataSet1, 3),.001);
		assertEquals(1, TwoDimRaggedArrayUtility.getLowestInColumn(dataSet2, 1),.001);
		assertEquals(3, TwoDimRaggedArrayUtility.getLowestInColumn(dataSet2, 2),.001);
		assertEquals(1.7, TwoDimRaggedArrayUtility.getLowestInColumn(dataSet3, 1),.001);
		assertEquals(2.7, TwoDimRaggedArrayUtility.getLowestInColumn(dataSet3, 3),.001);
	
	}
	@Test
	public void testGetLowestInColumnIndex() {
		assertEquals(0, TwoDimRaggedArrayUtility.getLowestInColumnIndex(dataSet1, 0),.001);
		assertEquals(3, TwoDimRaggedArrayUtility.getLowestInColumnIndex(dataSet1, 3),.001);
		assertEquals(1, TwoDimRaggedArrayUtility.getLowestInColumnIndex(dataSet2, 1),.001);
		assertEquals(2, TwoDimRaggedArrayUtility.getLowestInColumnIndex(dataSet2, 2),.001);
		assertEquals(1, TwoDimRaggedArrayUtility.getLowestInColumnIndex(dataSet3, 1),.001);
		assertEquals(3, TwoDimRaggedArrayUtility.getLowestInColumnIndex(dataSet3, 3),.001);
		
	}
	@Test
	public void testGetHighestInArray() {
		assertEquals(9, TwoDimRaggedArrayUtility.getHighestInArray(dataSet1), .001);
		assertEquals(11, TwoDimRaggedArrayUtility.getHighestInArray(dataSet2), .001);
		assertEquals(11.6, TwoDimRaggedArrayUtility.getHighestInArray(dataSet3), .001);
		assertEquals(8.2, TwoDimRaggedArrayUtility.getHighestInArray(dataSet4), .001);
		assertEquals(8.26, TwoDimRaggedArrayUtility.getHighestInArray(district3), .001);
		assertEquals(89352.68, TwoDimRaggedArrayUtility.getHighestInArray(district5), .001);
	}
	@Test
	public void testGetLowestInArray() {
		assertEquals(1, TwoDimRaggedArrayUtility.getLowestInArray(dataSet1), .001);
		assertEquals(1, TwoDimRaggedArrayUtility.getLowestInArray(dataSet2), .001);
		assertEquals(1.7, TwoDimRaggedArrayUtility.getLowestInArray(dataSet3), .001);
		assertEquals(-7.5, TwoDimRaggedArrayUtility.getLowestInArray(dataSet4), .001);
		assertEquals(-5.48, TwoDimRaggedArrayUtility.getLowestInArray(district3), .001);
		assertEquals(12536.54, TwoDimRaggedArrayUtility.getLowestInArray(district5), .001);
	
	}
	

}
